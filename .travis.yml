language: minimal
dist: bionic
services: docker

before_install:
    # Delete .git/ to maximize ccache effectiveness (no version string mismatches)
    - rm -rf .git

branches:
    only:
        - master

jobs:
    include:
        - name: "Build with GCC, run tests"
          env: TRAVIS_CACHE_ID=focal
          cache:
              directories:
                  - $HOME/.ccache-focal-gcc
                  - $HOME/.tox-cache
          script:
              # Fetch our current Ubuntu 20.04 CI image from Docker Hub
              # (automatically built by Docker):
              - docker pull hlwm/ci:focal

              # Build ad-hoc image, using hub image as cache
              # (=> does not actually build from scratch if the Dockerfile is
              # the same):
              - docker build -t focal --cache-from hlwm/ci:focal - <ci/Dockerfile.ci-focal

              # Perform actual tasks within temporary Docker image
              - docker run -u $UID --privileged -t --rm
                --volume=/etc/passwd:/etc/passwd:ro
                --volume=$HOME/.ccache-focal-gcc:/.ccache:rw
                --volume=$PWD:/hlwm:rw
                --volume=$HOME/.tox-cache:/hlwm/.tox:rw
                focal sh -c '
                    /hlwm/ci/build.py --build-dir=/hlwm/build --cxx=g++-9 --cc=gcc-9 --build-type=Debug --ccache=/.ccache --compile --run-tests
                '
              - "bash <(wget -O - https://codecov.io/bash) -f coverage.info || echo Warning: codecov report failed"

        - name: "Build with Clang, run linters and static analyzers"
          env: TRAVIS_CACHE_ID=focal-linter
          cache:
              directories:
                  - $HOME/.ccache-focal-clang
                  - $HOME/.tox-cache
          script:
              # Fetch our current Ubuntu 20.04 CI image from Docker Hub
              # (automatically built by Docker):
              - docker pull hlwm/ci:focal

              # Build ad-hoc image, using hub image as cache
              # (=> does not actually build from scratch if the Dockerfile is
              # the same):
              - docker build -t focal --cache-from hlwm/ci:focal - <ci/Dockerfile.ci-focal

              # Perform actual tasks within temporary Docker image
              - docker run -u $UID --privileged -t --rm
                --volume=/etc/passwd:/etc/passwd:ro
                --volume=$PWD:/hlwm:rw
                --volume=$HOME/.ccache-focal-clang:/.ccache:rw
                --volume=$HOME/.tox-cache:/hlwm/.tox:rw
                focal sh -c '
                    /hlwm/ci/build.py --build-dir=/hlwm/build --cxx=/hlwm/ci/clang++-and-tidy.sh --cc=/hlwm/ci/clang-and-tidy.sh --build-type=Debug --ccache=/.ccache --compile --check-using-std --iwyu --flake8
                '

        - name: "Build for 32bit with ancient GCC on Ubuntu 14.04"
          env: TRAVIS_CACHE_ID=trusty
          cache:
              directories:
                  - $HOME/.ccache-gcc-4.8
          script:
              # Fetch our current Ubuntu 14.04 CI image from Docker Hub
              # (automatically built by Docker):
              - docker pull hlwm/ci:trusty

              # Build ad-hoc image, using hub image as cache
              # (=> does not actually build from scratch if the Dockerfile is
              # the same):
              - docker build -t trusty --cache-from hlwm/ci:trusty -
                <ci/Dockerfile.ci-trusty

              # Build with gcc-4.8 using ad-hoc image (plain bash one-liner
              # because Python is too old):
              - docker run -u $UID -t --rm
                --volume=$PWD:/hlwm:rw
                --volume=$HOME/.ccache-gcc-4.8:/.ccache:rw
                --env CC=gcc-4.8
                --env CXX=g++-4.8
                --env CXXFLAGS=-m32
                --env CFLAGS=-m32
                trusty bash -c '
                    cd /tmp &&
                    ccache -z --max-size=500M &&
                    cmake -GNinja -DWITH_DOCUMENTATION=NO -DENABLE_CCACHE=YES /hlwm &&
                    time ninja -v -k10 &&
                    ccache -s
                    '
